{"ast":null,"code":"import { combineReducers } from 'redux'; //Initializing weather and city pieces of state to empty arrays\n\nconst initialStateResponse = {\n  weather: [],\n  city: {}\n}; //Reducer to handle the API response data\n//Actions of type 'WEATHER_DATA' will filter down the response data and assign to weather piece of state\n//Actions of type 'CITY_DATA' will pull out the city specific data and filter assign to city piece of state\n\nconst responseData = (state = initialStateResponse, action) => {\n  switch (action.type) {\n    case 'WEATHER_DATA':\n      const daily = action.payload.list.filter(item => {\n        return item.dt_txt.includes('15:00:00');\n      });\n      return Object.assign({}, state, {\n        weather: daily\n      });\n\n    case 'CITY_DATA':\n      return Object.assign({}, state, {\n        city: action.payload\n      });\n\n    default:\n      return state;\n  }\n}; //Initializing search term piece of state to an empty string\n\n\nconst initialStateSearch = {\n  term: ''\n}; //Setting the term piece of state equal to the action's payload which will be the input value\n\nconst searchTerm = (state = initialStateSearch, action) => {\n  switch (action.type) {\n    case 'SEARCH_TERM':\n      return Object.assign({}, state, {\n        term: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  searchTerm,\n  responseData\n});","map":{"version":3,"sources":["/Users/aschnall/Documents/Portfolio/weather-redux/weather/src/reducers/index.js"],"names":["combineReducers","initialStateResponse","weather","city","responseData","state","action","type","daily","payload","list","filter","item","dt_txt","includes","Object","assign","initialStateSearch","term","searchTerm"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG;AAC5BC,EAAAA,OAAO,EAAE,EADmB;AAE5BC,EAAAA,IAAI,EAAE;AAFsB,CAA7B,C,CAKA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,oBAAT,EAA+BK,MAA/B,KAA0C;AAC9D,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,cAAL;AACC,YAAMC,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBC,MAApB,CAA4BC,IAAD,IAAU;AAClD,eAAOA,IAAI,CAACC,MAAL,CAAYC,QAAZ,CAAqB,UAArB,CAAP;AACA,OAFa,CAAd;AAGA,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,KAAlB,EAAyB;AAACH,QAAAA,OAAO,EAAEM;AAAV,OAAzB,CAAP;;AACD,SAAK,WAAL;AACC,aAAOO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,KAAlB,EAAyB;AAAEF,QAAAA,IAAI,EAAEG,MAAM,CAACG;AAAf,OAAzB,CAAP;;AACD;AACC,aAAOJ,KAAP;AATF;AAWA,CAZD,C,CAcA;;;AACA,MAAMY,kBAAkB,GAAG;AAC1BC,EAAAA,IAAI,EAAE;AADoB,CAA3B,C,CAIA;;AACA,MAAMC,UAAU,GAAG,CAACd,KAAK,GAAGY,kBAAT,EAA6BX,MAA7B,KAAwC;AAC1D,UAAOA,MAAM,CAACC,IAAd;AACC,SAAK,aAAL;AACC,aAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,KAAlB,EAAyB;AAACa,QAAAA,IAAI,EAAEZ,MAAM,CAACG;AAAd,OAAzB,CAAP;;AACD;AACC,aAAOJ,KAAP;AAJF;AAMA,CAPD;;AASA,eAAeL,eAAe,CAAC;AAAEmB,EAAAA,UAAF;AAAcf,EAAAA;AAAd,CAAD,CAA9B","sourcesContent":["import { combineReducers } from 'redux';\n\n//Initializing weather and city pieces of state to empty arrays\nconst initialStateResponse = {\n\tweather: [],\n\tcity: {}\n}\n\n//Reducer to handle the API response data\n//Actions of type 'WEATHER_DATA' will filter down the response data and assign to weather piece of state\n//Actions of type 'CITY_DATA' will pull out the city specific data and filter assign to city piece of state\nconst responseData = (state = initialStateResponse, action) => {\n\tswitch(action.type) {\n\t\tcase 'WEATHER_DATA':\n\t\t\tconst daily = action.payload.list.filter((item) => {\n\t\t\t\treturn item.dt_txt.includes('15:00:00');\n\t\t\t})\n\t\t\treturn Object.assign({}, state, {weather: daily});\n\t\tcase 'CITY_DATA':\n\t\t\treturn Object.assign({}, state, { city: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\n//Initializing search term piece of state to an empty string\nconst initialStateSearch = {\n\tterm: ''\n}\n\n//Setting the term piece of state equal to the action's payload which will be the input value\nconst searchTerm = (state = initialStateSearch, action) => {\n\tswitch(action.type) {\n\t\tcase 'SEARCH_TERM':\n\t\t\treturn Object.assign({}, state, {term: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default combineReducers({ searchTerm, responseData });"]},"metadata":{},"sourceType":"module"}